{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shourish\\\\OneDrive\\\\Documents\\\\python\\\\ai-chatbot-app\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Chatbot.js\n\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      text: input,\n      sender: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch\");\n      const data = await response.json();\n      setMessages([...newMessages, {\n        text: data.reply,\n        sender: \"bot\"\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages([...newMessages, {\n        text: \"⚠️ Failed to connect to the server.\",\n        sender: \"bot\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n        children: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask me anything...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","newMessages","text","sender","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","reply","error","console","className","children","map","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shourish/OneDrive/Documents/python/ai-chatbot-app/frontend/src/components/Chatbot.js"],"sourcesContent":["// frontend/src/components/Chatbot.js\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { text: input, sender: \"user\" }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to fetch\");\r\n\r\n      const data = await response.json();\r\n\r\n      setMessages([\r\n        ...newMessages,\r\n        { text: data.reply, sender: \"bot\" },\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setMessages([\r\n        ...newMessages,\r\n        { text: \"⚠️ Failed to connect to the server.\", sender: \"bot\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbox\">\r\n        {messages.map((msg, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Ask me anything...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}