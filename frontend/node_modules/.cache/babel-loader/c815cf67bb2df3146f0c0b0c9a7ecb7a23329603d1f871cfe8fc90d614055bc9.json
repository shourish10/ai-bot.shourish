{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shourish\\\\OneDrive\\\\Documents\\\\python\\\\ai-chatbot-app\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const handleSend = () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages([...messages, userMessage]);\n    setInput(\"\");\n    fetch(\"http://127.0.0.1:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt: input\n      })\n    }).then(res => res.json()).then(data => {\n      const aiMessage = {\n        text: data.response,\n        sender: \"ai\"\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    }).catch(err => {\n      console.error(\"Error:\", err);\n      setMessages(prev => [...prev, {\n        text: \"Error: Could not connect to backend.\",\n        sender: \"ai\"\n      }]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender === \"user\" ? \"user\" : \"ai\"}`,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Ask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"WeNpxDEIB1TvYizD4iKTeHepowk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","handleSend","trim","userMessage","text","sender","fetch","method","headers","body","JSON","stringify","prompt","then","res","json","data","aiMessage","response","prev","catch","err","console","error","className","children","map","msg","i","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shourish/OneDrive/Documents/python/ai-chatbot-app/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const handleSend = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { text: input, sender: \"user\" };\r\n    setMessages([...messages, userMessage]);\r\n    setInput(\"\");\r\n\r\n    fetch(\"http://127.0.0.1:5000/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ prompt: input }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const aiMessage = { text: data.response, sender: \"ai\" };\r\n        setMessages((prev) => [...prev, aiMessage]);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error:\", err);\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          { text: \"Error: Could not connect to backend.\", sender: \"ai\" },\r\n        ]);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-window\">\r\n        {messages.map((msg, i) => (\r\n          <div\r\n            key={i}\r\n            className={`chat-message ${msg.sender === \"user\" ? \"user\" : \"ai\"}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your question...\"\r\n        />\r\n        <button onClick={handleSend}>Ask</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}